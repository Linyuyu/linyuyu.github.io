<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yuyu</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Yuyu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 20 Aug 2017 21:38:52 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>http://localhost:1313/about/</guid>
      <description> A Front End Rookie XD. Specialization in native iOS Mobile Application Development using Objective-C, Swift in Xcode.  </description>
    </item>
    
    <item>
      <title>基礎觀念：JavaScript Scope</title>
      <link>http://localhost:1313/post/javascript_scope/</link>
      <pubDate>Mon, 07 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/javascript_scope/</guid>
      <description>JavaScript Scope 變量作用域 JavaScript 有兩種變量作用域： Gloable Scope: 定義在函數之外的為全局變量，整個程序都可以訪問，直到頁面關閉才銷毀。 Local Scope: 定義在函數之內為局部變量，函數</description>
    </item>
    
    <item>
      <title>無暇的架構 Clean Architecture II</title>
      <link>http://localhost:1313/post/clean_architecture_2/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/clean_architecture_2/</guid>
      <description>The Clean Architecture II 前一篇我們介紹了 Clean Architecture 的主要精神與概念，現在我們來細部看一些層與名詞的定義 第一張圖是 Uncle Bob 的原圖 第二張是 App 常用到的簡化圖 Entities Entities 是 App 的核心，</description>
    </item>
    
    <item>
      <title>無暇的架構 Clean Architecture I</title>
      <link>http://localhost:1313/post/clean_architecture_1/</link>
      <pubDate>Wed, 18 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/clean_architecture_1/</guid>
      <description>The Clean Architecture I 首先 Clean Architecture 是 Uncle Bob 的心血結晶，他同時也是Clean Code 無瑕的程式碼的作者。大神推的很難看懂還有什麼好説的，立馬入坑！ 這個架構也被稱之為洋蔥</description>
    </item>
    
    <item>
      <title>基礎觀念：Function.bind</title>
      <link>http://localhost:1313/post/function_bind/</link>
      <pubDate>Mon, 12 Mar 2018 15:01:38 +0800</pubDate>
      
      <guid>http://localhost:1313/post/function_bind/</guid>
      <description>Function.bind 是什麼？ 如同字面上的含義 bind 就是綁定，那到底綁定什麼呢？我們先看一下它的定義： someMethod.bind(thisArg[, arg1[, arg2[, ...]]]) thisArg: 呼叫 someMethod 傳進去當作 this 的值。 看出來了嗎？簡單的說就是當你</description>
    </item>
    
    <item>
      <title>基礎觀念： Function.call 和 Function.apply 的區別</title>
      <link>http://localhost:1313/post/function_call_apply/</link>
      <pubDate>Thu, 08 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/function_call_apply/</guid>
      <description>Function.call vs Function.apply call 和 apply 都是 Function.prototype 的方法，是 JavaScript 引擎內在就實現了，也就是說所有的 Function 實體，都有 call 和 apply 方法。 區別它們的差異可以簡單的用一段程式碼理解： this.fun(arg1, arg2) == fun.call(this, arg1, arg2)</description>
    </item>
    
    <item>
      <title>基礎觀念： IIFE 立即執行函式</title>
      <link>http://localhost:1313/post/function_iife/</link>
      <pubDate>Fri, 26 May 2017 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/function_iife/</guid>
      <description>IIFE 立即執行函式 IIFE (Immediately Invoked Function Expression) 是一個定義完馬上就執行的 JavaScript function。 // example 1 (function () { // do something console.log(&#39;invoked&#39;) })() // example 2 (() =&amp;gt; { console.log(&#39;invoked&#39;) })() 它又稱為 Self-Executing Anonymous Function，也是</description>
    </item>
    
  </channel>
</rss>